name: SeqAn2 CI

on:
  push:
    branches:
      # Push events to branches matching refs/heads/master
      - 'master'
      # Push events to branches matching refs/heads/develop
      - 'develop'
  pull_request:

env:
  CMAKE_VERSION: 3.12.4
  TZ: Europe/Berlin

defaults:
  run:
    shell: bash -ex {0}

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "gcc8 (c++17) on Linux"
            os: ubuntu-20.04
            cxx: "g++-8"
            cc: "gcc-8"
            build_type: Release
            cxx_flags: "-std=c++17"

          - name: "gcc8 (c++17) on macOS"
            os: macos-10.15
            cxx: "g++-8"
            cc: "gcc-8"
            build_type: Release
            cxx_flags: "-std=c++17"

          - name: "gcc9 (c++17) on Linux"
            os: ubuntu-20.04
            cxx: "g++-9"
            cc: "gcc-9"
            build_type: Release
            cxx_flags: "-std=c++17"

          - name: "gcc9 (c++17) on macOS"
            os: macos-10.15
            cxx: "g++-9"
            cc: "gcc-9"
            build_type: Release
            cxx_flags: "-std=c++17"

          - name: "gcc9 (c++2a) on Linux"
            os: ubuntu-20.04
            cxx: "g++-9"
            cc: "gcc-9"
            build_type: Release
            cxx_flags: "-std=c++2a"

          - name: "gcc9 (c++2a) on macOS"
            os: macos-10.15
            cxx: "g++-9"
            cc: "gcc-9"
            build_type: Release
            cxx_flags: "-std=c++2a"

          - name: "gcc10 (c++20) on Linux"
            os: ubuntu-20.04
            cxx: "g++-10"
            cc: "gcc-10"
            build_type: Release
            cxx_flags: "-std=c++20"

          - name: "gcc10 (c++20) on macOS"
            os: macos-10.15
            cxx: "g++-10"
            cc: "gcc-10"
            build_type: Release
            cxx_flags: "-std=c++20"

          - name: "clang9 (c++17) on Linux"
            os: ubuntu-20.04
            cxx: "clang++-9"
            cc: "clang-9"
            build_type: Release
            cxx_flags: "-std=c++17"

          - name: "clang9 (c++17) on macOS"
            os: macos-10.15
            cxx: "clang++-9"
            cc: "clang-9"
            build_type: Release
            cxx_flags: "-std=c++17"

          - name: "clang9 (c++2a) on Linux"
            os: ubuntu-20.04
            cxx: "clang++-9"
            cc: "clang-9"
            build_type: Release
            cxx_flags: "-std=c++2a"

          - name: "clang9 (c++2a) on macOS"
            os: macos-10.15
            cxx: "clang++-9"
            cc: "clang-9"
            build_type: Release
            cxx_flags: "-std=c++2a"

          - name: "clang10 (c++20) on Linux"
            os: ubuntu-20.04
            cxx: "clang++-10"
            cc: "clang-10"
            build_type: Release
            cxx_flags: "-std=c++20"

          - name: "clang11 (c++20) on Linux"
            os: ubuntu-20.04
            cxx: "clang++-11"
            cc: "clang-11"
            build_type: Release
            cxx_flags: "-std=c++20"

          - name: "clang11 (c++20) on macOS"
            os: macos-10.15
            cxx: "clang++-11"
            cc: "clang-11"
            build_type: Release
            cxx_flags: "-std=c++20"

          - name: "icc (c++20) on Linux"
            icc_version: "2021.1.2"
            os: ubuntu-20.04
            cxx: icc
            cc: icc
            build_type: Release
            cxx_flags: "-std=c++20"

    steps:
      - name: Checkout SeqAn2
        uses: actions/checkout@v2
        with:
          path: seqan

      - name: Get cached CMake
        uses: actions/cache@v2
        with:
          path: /tmp/cmake-download
          key: ${{ runner.os }}-CMake_${{ env.CMAKE_VERSION }}

      - name: Setup CMake
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            OS="Linux"
          else
            OS="Darwin"
          fi
          mkdir -p /tmp/cmake-download
          wget --retry-connrefused --waitretry=30 --read-timeout=30 --timeout=30 --tries=20 --no-clobber --quiet --directory-prefix=/tmp/cmake-download/ https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-${OS}-x86_64.tar.gz
          tar -C /tmp/ -zxf /tmp/cmake-download/cmake-${CMAKE_VERSION}-${OS}-x86_64.tar.gz
          echo "/tmp/cmake-${CMAKE_VERSION}-${OS}-x86_64/bin" >> $GITHUB_PATH # Only available in subsequent steps!

      - name: Add package source
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/ppa
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository --yes "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main"

          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/oneAPI.list" -o APT::Get::List-Cleanup="0"

          sudo apt-get update

      - name: Install ccache
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install --yes ccache
          else
            brew install --force-bottle ccache
          fi

      - name: Install dependencies
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install --yes libboost-dev libbz2-dev libxml2-utils zlib1g-dev
          else
            brew install --force-bottle boost
          fi

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Python dependencies
        run: |
          pip install setuptools wheel
          pip install -r seqan/manual/requirements.txt

      - name: Install compiler ${{ matrix.cxx }}
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            if [[ "${{ matrix.cxx }}" == "icc" ]]; then
              sudo apt-get install --yes intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-${{ matrix.icc_version }}
            else
              sudo apt-get install --yes ${{ matrix.cxx }}
            fi
          else
            if [[ "${{ matrix.cxx }}" == "clang++-"* ]]; then
              cxx_macos_name=$(echo "${{ matrix.cxx }}" | sed "s/clang++-/llvm@/g") # e.g. llvm@7
            else
              cxx_macos_name=$(echo "${{ matrix.cxx }}" | sed "s/++-/cc@/g")
            fi
            brew install --force-bottle $cxx_macos_name
            brew link --overwrite $cxx_macos_name
            if [[ "${{ matrix.cxx }}" == "clang++-"* ]]; then
              ln -s /usr/local/opt/$cxx_macos_name/bin/clang++ /usr/local/opt/$cxx_macos_name/bin/${{ matrix.cxx }}
              echo "/usr/local/opt/$cxx_macos_name/bin" >> $GITHUB_PATH # Only available in subsequent steps!
            fi
          fi

      - name: Load ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ matrix.name }}-ccache-${{ github.ref }}-${{ github.run_number }}
          # Restoring: From current branch, otherwise from base branch, otherwise from any branch.
          restore-keys: |
            ${{ matrix.name }}-ccache-${{ github.ref }}
            ${{ matrix.name }}-ccache-${{ github.base_ref }}
            ${{ matrix.name }}-ccache-

      # Also pass python path: https://github.com/actions/setup-python/issues/121
      - name: Configure tests
        env:
          CXX: "ccache ${{ matrix.cxx }}"
          CC: "ccache ${{ matrix.cc }}"
        run: |
          if [[ "${{ matrix.cxx }}" == "icc" ]]; then
            source /opt/intel/oneapi/compiler/${{ matrix.icc_version }}/env/vars.sh
          fi
          mkdir seqan-build
          cd seqan-build
          cmake ../seqan -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }}" -DSEQAN_DISABLE_VERSION_CHECK=ON -DSEQAN_TRAVIS_BUILD:BOOL=ON -DPython3_ROOT_DIR=${pythonLocation}

      - name: Build tests
        env:
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 6
          CCACHE_MAXSIZE: 5G
        run: |
          if [[ "${{ matrix.cxx }}" == "icc" ]]; then
            source /opt/intel/oneapi/compiler/${{ matrix.icc_version }}/env/vars.sh
          fi
          cd seqan-build
          make -k -j2

      - name: Run tests
        run: |
          cd seqan-build
          ctest . -j2 --output-on-failure --timeout 120 || ctest . -j2 --output-on-failure --timeout 120 --rerun-failed
